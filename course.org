#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:t title:t toc:t todo:t |:t
#+title: Introduction to Computing for Psychology Students
#+date: <2019-04-30 Tue>
#+author: Britt Anderson
#+email: britt@uwaterloo.ca
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 26.2 (Org mode 9.2.3)
#+latex_class: article
#+latex_class_options:
#+latex_header: \usepackage{times}
#+latex_header_extra:
#+description:
#+keywords:
#+subtitle:
#+latex_compiler: pdflatex
* Course Goal:
  Improve your ability to use your computer as a tool for academic activities.

  This leads to the following learning objectives
* Learning Objectives:
    - Learn how to install software.
    - Learn how to work from the command line.
    - Learn the rudiments of programming sufficient to allow further progress through self study.
    - Learn about the use of libraries to enable programming psychological experiments.
    - Learn how to use version control
    - Learn how to write papers that blend code and analyses to generate reproducible research reports.      
      This includes learning
      - how to use citation databases
      - generate graphics of analyses
      - conduct statistical analyses
      - generate multiple output formats from a single source file. 
* Course Mechanics
  To meet the learning objectives you will need to *do* more than you listen or observe. You will also need to break old habits. That means in the beginning it will be harder to do simple things. It also means that in the future things that used to be impossible for you to do will now be possible (but they may still not be easy). Combining computer skills with with your psychology content knowledge makes you more attractive to employers and on a graduate school application. 

  Thus, this course will require you to use the Linux operating system (the XUbuntu flavor) and tools available within that space. Later on, after this course, if you wish to return to the world of OSX and Windows10 you will know what you are looking for, and you will have the skills necessary to make it available. 

* Outline
** Session 1 Linux
   1. Learn how to boot your computer from a USB. 
   2. Run an XUbuntu Live CD
   3. Install Linux XUbuntu to a second USB
   4. Boot your computer from the /new/ USB and install *emacs* /from the command line./
      1. The command line - open up a "terminal". Your terminal will be running a "shell."
      2. Package Managers
         1. The ubuntu package manager
            Basic commands: 
            - apt update
            - apt install 
            - apt search
            - apt remove
         2. A basic demonstration
            #+Begin_src sh :eval never :export code
            sudo apt update
            sudo apt search emacs
            sudo apt install emacs
            emacs &
            #+end_src
            
*** Troubleshooting
    - I don't have a USB port? :: Do you have an sdcard port? Yes? You can use that. If you have neither you will need a different computer. It can be a cheap (as in the price of textbook cheap) and old one.
    - I only have one USB port. :: Can you work with a neighbor to repeat the installation instructions on a second USB that you can use on your machine? If not, you may need something like this. 
         #+Caption: USB Port Expander
       #+Name: USBPortExpndPic
       #+ATTR_HTML: :width 50%
       [[https://images-na.ssl-images-amazon.com/images/I/81j1TYALbYL._SL1500_.jpg]]
    - Can I just install Linux on my computer? :: You certainly can, and you can even keep you "old" operating system and use one or the other as you choose. But this seemed more than I could require of all students, but I encourage you to do it if you are willing. First, **back up everything** because trying this and getting it wrong could cause you to lose all your saved information. 
    - I already use Linux. :: Good for you. Help a classmate.
    - What is Linux? :: Check wikipedia.
    - Why use Xubuntu? :: Is it different from Ubuntu (Debian, Arch, Fedora, OpenSuse...)? Linux is a kernel that powers the system. All the rest are different choices people make of the tools they want to wrap around that "engine." XUbuntu is a reasonably light-weight linux distribution that runs well on slow machines, and yet has enough of a user base to make it reasonably easy to find help on line.
*** Homework
    1. Send me a screenshot of emacs open and running on your laptop.
       Hints: look for xfce4-screenshooter to take the screenshot. Log on to learn while running linux. Of course that will require you to figure out how to connect to the internet.
    2. Look at the available software applications and download one (1). Don't go crazy on this. You are running your whole computer from a small usb. Just find one that strikes you as cool or interesting and install it, play with it, and write a one-paragraph description of it using this format:
       
       #+Attr_HTML: :textarea t :width 40
       #+Begin_example
       * Package Name
         My Package
       ** Short Description
          A package for something.
       ** Review
          I liked it because ... and so on.
       #+END_Example

       Save it with yourlastname-firstname_pkgname.org as the file name. Upload it to the dropbox on learn. And save it, because you will need it again soon. 
** Session 2 Command Line Basics and EMACS Introduction
*** Command Line
**** What is it?
**** Why use it? [[https://www.quora.com/How-important-is-it-to-learn-command-line-interfaces/answers/1620528][One opinion.]]
***** The [[http://write.flossmanuals.net/command-line/introduction/][Manual]]
**** Find another
**** Find your terminal?
     Why is it called the terminal?
***** Operating Systems
      - Windows
        - [[https://www.howtogeek.com/235101/10-ways-to-open-the-command-prompt-in-windows-10/][CMD]]
        - [[https://docs.microsoft.com/en-us/powershell/scripting/getting-started/getting-started-with-windows-powershell?view=powershell-6][Power Shell]]
        - [[https://docs.microsoft.com/en-us/windows/wsl/install-win10][WSL]] 
          If you use this I recommend you install the Ubuntu version. That is
          the one that I know the most about from the options. Note that
          this will give you access to command line tools, but not to
          graphical tools.
        - **Recommended** If you have windows 10 you can run linux as a
          [[https://www.windowscentral.com/how-run-linux-distros-windows-10-using-hyper-v][virtual machine]].
      - OSX
        - Applications/Utilities/Terminal
        - Why don't you have to install a virtual machine to get linux commands on OSX?
      - Linux 
        - probably xterm
**** Terminal Games
     1. Find the location of your Desktop folder.
     2. Change to that directory.
     3. Find out how much free space you have on your computer disk.
*** Exercises Emacs
**** Emacs
     1. Tutorial ~Ctrl-h t~ (aka =C-h t=)
     2. Find the Psychotherapist - you may need it.
     3. Play a game - try ~M-x tetris~
     4. Init files and packages. 
        Emacs has it's own package system that allows you to greatly expand its functionality. Most of those customization are set up in your =~/.emacs.d/init.el= file. Create it if it doesn't exist. 
        You can learn more by reading the [[info:emacs#Init%20File][info file]].
     5. [[info:org#Top][Orgmode]]
        1. Create an outline.
        2. Create a link
        3. Insert an image
        4. Export as a web page. 
** Session 3 Version Control Github
*** Version Control
**** Git
     **Not** the same as Github, though that is one of the more common /social/ uses of git for sharing and collaborating on code. 
**** Installation of Git
     - seriously recommend [[https://gitforwindows.org/][Windows users]] use it through the command line (BASH). 
**** Git
     1. Open a terminal
     2. Move (~cd~ or ~dir~) into your Desktop
     3. type =git init myrepo=
     4. Should see message from the terminal prompt that it has been created.
     5. Feel free to delete (e.g. =rm -rf ./myrepo=)
**** Magit
**** Forks and Clones and Pull Requests
** Session 4 Python 
*** Python
    1. Test for Python in a terminal.
       - open a terminal
       - type ~python --version~ then ~enter~
       - If you see an answer you have python. Type ~python~. Note the cursor has changed.
       - type ~2 + 2 enter~
       - Do you see 4?
       - type ~quit()~ to exit.
       - Why do you need to have the parentheses after the word quit?
*** Coding - General
*** Writing Code
*** Testing Code
**** Interactive
**** Script
*** Coding basics
*** Types
    - Integers
    - Doubles/Floats
    - Booleans
    - Lists and Tuples
    - Dictionaries
*** Constants and Variables
*** Assignment and Equality
 #+begin_src python :results output :exports both
 a = 2
 print(a == 3)
 #+end_src

 #+RESULTS:
 : False

*** Data Types
*** Loops
**** For 
**** While
*** Conditionals
*** Functions
 #+begin_src python :exports code  :session *pythonPractice*
 def myadd(x,y):
    return(x+y)
 #+end_src

 #+RESULTS:

 #+begin_src python :exports both :results output :session *pythonPractice*
 myadd(2,3)
 #+end_src

 #+RESULTS:
 : 5
*** Interpretation and Interactivity
*** Scripts
*** Libraries
*** Programs
*** Debugging and Basic Working Methods
*** IDEs
*** Pip to Install Libraries and Virtual Environments
** Session 5 R
*** R
    1. Test for R from a terminal.
       - open terminal
       - type ~r~ then ~enter~
       - type ~2 + 2 enter~
       - Do you see 4?
       - type ~quit()~ to exit.
    2. Test for R in Emacs
       - ~M-x R~
*** R Coding Basics - compare
*** Data handling in R
** Session 6
*** Data handling in Python
** Session 7
*** Interaction Plots
**** Plotting in R
** Session 8
*** Experimental Programming in Python
**** Psychopy Library
** Session 9
*** Writing a simple report
*** Mixing Code and Text for reproducibility
** Session 10
** Session 11
** Session 12















